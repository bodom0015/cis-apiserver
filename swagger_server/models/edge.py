# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.com import Com  # noqa: F401,E501
from swagger_server.models.edge_type import EdgeType  # noqa: F401,E501
from swagger_server import util


class Edge(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, args: str=None, type: EdgeType=None, _from: Com=None, to: Com=None, operation: str=None):  # noqa: E501
        """Edge - a model defined in Swagger

        :param id: The id of this Edge.  # noqa: E501
        :type id: int
        :param name: The name of this Edge.  # noqa: E501
        :type name: str
        :param args: The args of this Edge.  # noqa: E501
        :type args: str
        :param type: The type of this Edge.  # noqa: E501
        :type type: EdgeType
        :param _from: The _from of this Edge.  # noqa: E501
        :type _from: Com
        :param to: The to of this Edge.  # noqa: E501
        :type to: Com
        :param operation: The operation of this Edge.  # noqa: E501
        :type operation: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'args': str,
            'type': EdgeType,
            '_from': Com,
            'to': Com,
            'operation': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'args': 'args',
            'type': 'type',
            '_from': 'from',
            'to': 'to',
            'operation': 'operation'
        }

        self._id = id
        self._name = name
        self._args = args
        self._type = type
        self.__from = _from
        self._to = to
        self._operation = operation

    @classmethod
    def from_dict(cls, dikt) -> 'Edge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Edge of this Edge.  # noqa: E501
        :rtype: Edge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Edge.

        The primary key for this edge  # noqa: E501

        :return: The id of this Edge.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Edge.

        The primary key for this edge  # noqa: E501

        :param id: The id of this Edge.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Edge.

        A label for this edge  # noqa: E501

        :return: The name of this Edge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Edge.

        A label for this edge  # noqa: E501

        :param name: The name of this Edge.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def args(self) -> str:
        """Gets the args of this Edge.

        The queue name or file name to use (depends on 'type')  # noqa: E501

        :return: The args of this Edge.
        :rtype: str
        """
        return self._args

    @args.setter
    def args(self, args: str):
        """Sets the args of this Edge.

        The queue name or file name to use (depends on 'type')  # noqa: E501

        :param args: The args of this Edge.
        :type args: str
        """
        if args is None:
            raise ValueError("Invalid value for `args`, must not be `None`")  # noqa: E501

        self._args = args

    @property
    def type(self) -> EdgeType:
        """Gets the type of this Edge.


        :return: The type of this Edge.
        :rtype: EdgeType
        """
        return self._type

    @type.setter
    def type(self, type: EdgeType):
        """Sets the type of this Edge.


        :param type: The type of this Edge.
        :type type: EdgeType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def _from(self) -> Com:
        """Gets the _from of this Edge.


        :return: The _from of this Edge.
        :rtype: Com
        """
        return self.__from

    @_from.setter
    def _from(self, _from: Com):
        """Sets the _from of this Edge.


        :param _from: The _from of this Edge.
        :type _from: Com
        """

        self.__from = _from

    @property
    def to(self) -> Com:
        """Gets the to of this Edge.


        :return: The to of this Edge.
        :rtype: Com
        """
        return self._to

    @to.setter
    def to(self, to: Com):
        """Sets the to of this Edge.


        :param to: The to of this Edge.
        :type to: Com
        """

        self._to = to

    @property
    def operation(self) -> str:
        """Gets the operation of this Edge.


        :return: The operation of this Edge.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation: str):
        """Sets the operation of this Edge.


        :param operation: The operation of this Edge.
        :type operation: str
        """

        self._operation = operation
