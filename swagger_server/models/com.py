# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Com(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, model_id: str=None, node_id: str=None):  # noqa: E501
        """Com - a model defined in Swagger

        :param name: The name of this Com.  # noqa: E501
        :type name: str
        :param model_id: The model_id of this Com.  # noqa: E501
        :type model_id: str
        :param node_id: The node_id of this Com.  # noqa: E501
        :type node_id: str
        """
        self.swagger_types = {
            'name': str,
            'model_id': str,
            'node_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'model_id': 'model_id',
            'node_id': 'node_id'
        }

        self._name = name
        self._model_id = model_id
        self._node_id = node_id

    @classmethod
    def from_dict(cls, dikt) -> 'Com':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Com of this Com.  # noqa: E501
        :rtype: Com
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Com.

        The (unique) name of the Com  # noqa: E501

        :return: The name of this Com.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Com.

        The (unique) name of the Com  # noqa: E501

        :param name: The name of this Com.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def model_id(self) -> str:
        """Gets the model_id of this Com.

        The id of the model that the Com is part of  # noqa: E501

        :return: The model_id of this Com.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: str):
        """Sets the model_id of this Com.

        The id of the model that the Com is part of  # noqa: E501

        :param model_id: The model_id of this Com.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def node_id(self) -> str:
        """Gets the node_id of this Com.

        The id of the node instance that the Com is part of  # noqa: E501

        :return: The node_id of this Com.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this Com.

        The id of the node instance that the Com is part of  # noqa: E501

        :param node_id: The node_id of this Com.
        :type node_id: str
        """

        self._node_id = node_id
