# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.edge import Edge  # noqa: F401,E501
from swagger_server.models.node import Node  # noqa: F401,E501
from swagger_server import util


class Graph(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nodes: List[Node]=None, edges: List[Edge]=None):  # noqa: E501
        """Graph - a model defined in Swagger

        :param nodes: The nodes of this Graph.  # noqa: E501
        :type nodes: List[Node]
        :param edges: The edges of this Graph.  # noqa: E501
        :type edges: List[Edge]
        """
        self.swagger_types = {
            'nodes': List[Node],
            'edges': List[Edge]
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'edges': 'edges'
        }

        self._nodes = nodes
        self._edges = edges

    @classmethod
    def from_dict(cls, dikt) -> 'Graph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Graph of this Graph.  # noqa: E501
        :rtype: Graph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self) -> List[Node]:
        """Gets the nodes of this Graph.


        :return: The nodes of this Graph.
        :rtype: List[Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: List[Node]):
        """Sets the nodes of this Graph.


        :param nodes: The nodes of this Graph.
        :type nodes: List[Node]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def edges(self) -> List[Edge]:
        """Gets the edges of this Graph.


        :return: The edges of this Graph.
        :rtype: List[Edge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges: List[Edge]):
        """Sets the edges of this Graph.


        :param edges: The edges of this Graph.
        :type edges: List[Edge]
        """
        if edges is None:
            raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501

        self._edges = edges
